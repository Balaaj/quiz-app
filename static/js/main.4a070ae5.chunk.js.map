{"version":3,"sources":["assets/Expertizo-logo.png","assets/icons/star.svg","components/Questions.js","store/actions/dataAction.js","App.js","reportWebVitals.js","store/reducers/dataReducer.js","store/reducers/uiReducer.js","store/store.js","index.js"],"names":["Questions","stateData","useSelector","state","data","useState","status","setStatus","endQuiz","setEndQuiz","countStar","easy","medium","hard","dispatch","useDispatch","useEffect","stars","i","questions","currentIndex","difficulty","push","src","star","style","height","width","alt","Ques","question","index","total","options","score","incorrect_answers","correct_answer","sort","Math","random","alignSelf","decodeURIComponent","category","Row","map","opt","Col","md","xs","Button","disabled","onClick","type","setQuestionScore","chkScore","variant","marginTop","setQuestionsIndex","scorePercentage","parseInt","questionScore","maxScorePercentage","length","lowestPercentage","completedPercentage","Container","fluid","ProgressBar","now","className","display","flexDirection","justifyContent","striped","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","questionData","dataReducer","action","payload","isLoading","uiReducer","persistConfig","key","storage","whitelist","appReducer","combineReducers","ui","rootReducer","persistReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","configureStore","RRedux","StrictMode","ReactDOM","render","document","getElementById"],"mappings":"61LAAe,I,oECAA,G,MAAA,IAA0B,kCCoH1BA,EA3GG,WACd,IAAMC,EAAYC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,QADzB,EAEQC,mBAAS,MAFjB,mBAEbC,EAFa,KAELC,EAFK,OAGUF,oBAAS,GAHnB,mBAGbG,EAHa,KAGJC,EAHI,KAIdC,EAAY,CACdC,KAAM,EACNC,OAAQ,EACRC,KAAM,GAEJC,EAAWC,cACjBC,qBAAU,cAOP,IAIH,IAFA,IAAMC,EAAQ,GAELC,EAAI,EAAGA,GAAKR,EAAUT,EAAUkB,UAAUlB,EAAUmB,cAAcC,YAAaH,IACpFD,EAAMK,KAAK,qBAAKC,IAAKC,EAAMC,MAAO,CAAEC,OAAQ,GAAIC,MAAO,IAAMC,IAAI,UAGrE,IAAMC,EAAO,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,MACvBC,GAD0C,EAAZC,MACpB,sBAAIJ,EAASK,mBAAb,CAAgCL,EAASM,iBAAgBC,MAAK,kBAAMC,KAAKC,SAAW,OAiBpG,OACI,qCACI,oBAAId,MAAO,CAAEe,UAAW,OAAxB,4BAA8CT,EAAQ,EAAtD,eAA8DC,KAC9D,mBAAGP,MAAO,CAAEe,UAAW,OAAvB,SAAgC,gCAAQC,mBAAmBX,EAASY,cAEpE,qBAAKjB,MAAO,CAAEe,UAAW,OAAzB,SACKvB,IAEL,4BAAIwB,mBAAmBX,EAASA,YAEhC,cAACa,EAAA,EAAD,UACKV,EAAQW,KAAI,SAAAC,GAAG,OACZ,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAhB,SACI,cAACC,EAAA,EAAD,CAAQC,SAAoB,MAAV5C,EAAgB6C,QAAS,YA5B9C,SAACN,GACdtC,EAAUsC,GAAOf,EAASM,eAAiB,UAAY,aACvDtB,ECzBoB,SAACoB,GAE/B,MAAO,CACLkB,KAAM,qBACNlB,SDqBiBmB,CAAiBR,GAAOf,EAASM,eAAiB,EAAI,IA0BIkB,CAAST,IAAQU,QAAQ,QAAQ9B,MAAO,CAAE+B,UAAW,GAAI7B,MAAO,KAAnH,SACKc,mBAAmBI,YAKzB,MAAVvC,GAAkB,qCACf,4BAAIA,IACJ,cAAC2C,EAAA,EAAD,CAAQE,QAAS,WA9BrBpB,EAAQ,GAAKC,EACbvB,GAAW,IAGXF,EAAU,MACVO,ECzCiB,SAACiB,GAChC,MAAO,CACLqB,KAAM,sBACNrB,SDsCqB0B,CAAkB1B,EAAQ,MAyBIwB,QAAQ,QAAQ9B,MAAO,CAAE+B,UAAW,GAAI7B,MAAO,KAAlF,SACKI,EAAQ,GAAKC,EAAb,wCAOf0B,EAAkBC,SAAU1D,EAAU2D,eAAiB3D,EAAUmB,aAAe,GAAM,KACtFyC,EAAqBF,UAAW1D,EAAUmB,aAAe,GAAKnB,EAAUkB,UAAU2C,OAAU,KAC5FC,EAAmBJ,SAAU1D,EAAU2D,cAAgB3D,EAAUkB,UAAU2C,OAAU,KAGrFE,GAAwB/D,EAAUmB,aAAe,GAAKnB,EAAUkB,UAAU2C,OAAU,IAG1F,OACI,eAACG,EAAA,EAAD,CAAWC,OAAK,EAACzC,MAAO,CAAEE,MAAO,OAAjC,UACI,cAACwC,EAAA,EAAD,CAAaZ,QAAQ,UAAUa,IAAKJ,EAAqBvC,MAAO,CAAE+B,UAAW,MAC7E,qBAAKa,UAAU,mBAAf,SACM7D,EAKE,8CAAeP,EAAU2D,iBALjB,cAAC/B,EAAD,CACRC,SAAU7B,EAAUkB,UAAUlB,EAAUmB,cACxCc,MAAOjC,EAAU2D,cACjB5B,MAAO/B,EAAUkB,UAAU2C,OAC3B/B,MAAO9B,EAAUmB,iBAGzB,sBAAKK,MAAO,CAAE6C,QAAS,OAAQC,cAAe,MAAOC,eAAgB,iBAArE,UACI,gDAAiBd,EAAjB,OACA,oDAAqBG,EAArB,UAEJ,eAACM,EAAA,EAAD,WAEI,cAACA,EAAA,EAAD,CAAaM,SAAO,EAAClB,QAAQ,UAAUa,IAAKV,GAAsB,GAElE,cAACS,EAAA,EAAD,CAAaM,SAAO,EAAClB,QAAQ,UAAUa,IAAKP,GAAyB,GAErE,cAACM,EAAA,EAAD,CAAaZ,QAAQ,SAASa,IAAKL,GAAuB,UE5E3DW,MA/Bf,WACE,OACE,qBAAKL,UAAU,MAAf,SACE,qBAAKA,UAAU,cAAf,SAOE,cAAC,EAAD,SCDOM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uDCLRQ,EAAe,CACnBjE,UAAWkE,EACXjE,aAAc,EACdwC,cAAe,GA0BF0B,EAvBK,WAAmC,IAAlCnF,EAAiC,uDAAzBiF,EAAcG,EAAW,uCACpD,OAAQA,EAAOnC,MACb,IAAK,gBACH,OAAO,2BACFjD,GADL,IAEEgB,UAAWoE,EAAOC,QAAQpF,MAAQiF,EAClCjE,aAAcmE,EAAOC,QAAQzD,OAAS,IAE1C,IAAK,sBACH,OAAO,2BACF5B,GADL,IAEEiB,aAAcmE,EAAOxD,QAEzB,IAAK,qBACH,OAAO,2BACF5B,GADL,IAEEyD,cAAezD,EAAMyD,cAAgB2B,EAAOrD,QAEhD,QACE,OAAO/B,IC3BPiF,EAAe,CACjBK,WAAW,GAoBEC,EAjBC,WAAmC,IAAlCvF,EAAiC,uDAAzBiF,EAAcG,EAAW,uCAChD,OAAQA,EAAOnC,MACX,IAAK,mBACL,OAAO,2BACFjD,GADL,IAEEsF,WAAW,IAEb,IAAK,kBACL,OAAO,2BACFtF,GADL,IAEEsF,WAAW,IAEf,QACE,OAAOtF,ICTTwF,EAAgB,CACpBC,IAAK,OACLC,YACAC,UAAW,IAGPC,EAAaC,YAAgB,CACjC5F,KAAMkF,EACNW,GAAIP,IAGAQ,EAAc,SAAC/F,EAAOoF,GAC1B,OAAOQ,EAAW5F,EAAOoF,IAKZ,GAFUY,YAAeR,EAAeO,GAExC,WACb,IAAIE,EAAQC,YAAYH,EAAaI,YAAgBC,MAErD,MAAO,CAAEH,QAAOI,UADAC,YAAaL,MCfzBA,G,YAAQM,IAAiBN,OAGzBO,GAFYD,IAAiBF,UAEpB,kBACb,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SAEI,cAAC,IAAMQ,WAAP,UACE,cAAC,EAAD,UAMRC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BrC,M","file":"static/js/main.4a070ae5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Expertizo-logo.76d50987.png\";","export default __webpack_public_path__ + \"static/media/star.dccf64d1.svg\";","import React, { useEffect, useState } from 'react'\r\nimport { Container, Row, Col, Button, ProgressBar } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setQuestionsIndex } from '../store/actions/dataAction';\r\nimport { setQuestionScore } from './../store/actions/dataAction';\r\nimport './Questions.css';\r\nimport star from '../assets/icons/star.svg';\r\n// import outline-star from '../assets/icons/star-outline.svg';\r\n\r\nconst Questions = () => {\r\n    const stateData = useSelector(state => state.data)\r\n    const [status, setStatus] = useState(null)\r\n    const [endQuiz, setEndQuiz] = useState(false)\r\n    const countStar = {\r\n        easy: 1,\r\n        medium: 2,\r\n        hard: 3\r\n    };\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n\r\n        // console.log(stateData)\r\n        // console.log(stateData.currentIndex)\r\n        // return () => {\r\n        //     cleanup\r\n        // }\r\n    }, [])\r\n\r\n    const stars = [];\r\n\r\n    for (let i = 1; i <= countStar[stateData.questions[stateData.currentIndex].difficulty]; i++) {\r\n        stars.push(<img src={star} style={{ height: 20, width: 20 }} alt=\"logo\" />)\r\n    }\r\n\r\n    const Ques = ({ question, index, total, score }) => {\r\n        const options = [...question.incorrect_answers, question.correct_answer].sort(() => Math.random() - 0.5)\r\n\r\n        const chkScore = (opt) => {\r\n            setStatus(opt == question.correct_answer ? \"Correct\" : \"Incorrect\");\r\n            dispatch(setQuestionScore(opt == question.correct_answer ? 1 : 0))\r\n        }\r\n\r\n        const nextQues = () => {\r\n            if (index + 1 == total) {\r\n                setEndQuiz(true)\r\n\r\n            } else {\r\n                setStatus(null);\r\n                dispatch(setQuestionsIndex(index + 1))\r\n            }\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <h3 style={{ alignSelf: 'end' }}>{`Question ${index + 1} of ${total}`}</h3>\r\n                <p style={{ alignSelf: 'end' }}><small>{decodeURIComponent(question.category)}</small></p>\r\n\r\n                <div style={{ alignSelf: 'end' }}>\r\n                    {stars}\r\n                </div>\r\n                <p>{decodeURIComponent(question.question)}</p>\r\n\r\n                <Row>\r\n                    {options.map(opt => (\r\n                        <Col md={6} xs={12}>\r\n                            <Button disabled={status != null} onClick={() => { chkScore(opt) }} variant=\"light\" style={{ marginTop: 15, width: 250 }}>\r\n                                {decodeURIComponent(opt)}\r\n                            </Button>\r\n                        </Col>\r\n                    ))}\r\n                </Row>\r\n                {status != null && <>\r\n                    <p>{status}</p>\r\n                    <Button onClick={() => nextQues()} variant=\"light\" style={{ marginTop: 15, width: 150 }}>\r\n                        {index + 1 == total ? `Check Score` : `Next Questions`}\r\n                    </Button>\r\n                </>}\r\n            </>\r\n        )\r\n    }\r\n\r\n    const scorePercentage = parseInt((stateData.questionScore / (stateData.currentIndex + 1)) * 100);\r\n    const maxScorePercentage = parseInt(((stateData.currentIndex + 1) / stateData.questions.length) * 100);\r\n    const lowestPercentage = parseInt((stateData.questionScore / stateData.questions.length) * 100);\r\n\r\n\r\n    const completedPercentage = ((stateData.currentIndex + 1) / stateData.questions.length) * 100;\r\n\r\n\r\n    return (\r\n        <Container fluid style={{ width: '80%' }}>\r\n            <ProgressBar variant=\"success\" now={completedPercentage} style={{ marginTop: 20 }} />\r\n            <div className=\"Question-content\">\r\n                {!endQuiz ? <Ques\r\n                    question={stateData.questions[stateData.currentIndex]}\r\n                    score={stateData.questionScore}\r\n                    total={stateData.questions.length}\r\n                    index={stateData.currentIndex} /> :\r\n                    <h1>{`Score: ${stateData.questionScore}`}</h1>}\r\n            </div>\r\n            <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\r\n                <span>{`Score: ${scorePercentage}%`}</span>\r\n                <span>{`Max Score: ${maxScorePercentage}%`}</span>\r\n            </div>\r\n            <ProgressBar>\r\n                {/* score */}\r\n                <ProgressBar striped variant=\"success\" now={scorePercentage} key={1} />\r\n                {/* max Score */}\r\n                <ProgressBar striped variant=\"warning\" now={maxScorePercentage} key={2} />\r\n                {/* lowest Score */}\r\n                <ProgressBar variant=\"danger\" now={lowestPercentage} key={3} />\r\n            </ProgressBar>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Questions\r\n","export const setQuestions = (payload) => {\r\n  return {\r\n    type: 'SET_QUESTIONS',\r\n    payload\r\n  }\r\n}\r\n\r\nexport const setQuestionsIndex = (index) => {\r\n  return {\r\n    type: 'SET_QUESTIONS_INDEX',\r\n    index\r\n  }\r\n}\r\n\r\nexport const setQuestionScore = (score) => {\r\n\r\n  return {\r\n    type: 'SET_QUESTION_SCORE',\r\n    score\r\n  }\r\n}","import logo from './assets/Expertizo-logo.png';\nimport './App.css';\nimport Questions from './components/Questions';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-content\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Container fluid>\n          <h2>Quiz App</h2>\n          <p><small>Test your Knowledge</small></p>\n          <Button variant=\"primary\">Start</Button>\n        </Container> */}\n        <Questions />\n      </div>\n\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import questionData from '../../questionData.json'\r\n\r\nconst initialState = {\r\n  questions: questionData,\r\n  currentIndex: 0,\r\n  questionScore: 0\r\n}\r\n\r\nconst dataReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'SET_QUESTIONS':\r\n      return {\r\n        ...state,\r\n        questions: action.payload.data || questionData,\r\n        currentIndex: action.payload.index || 0\r\n      }\r\n    case 'SET_QUESTIONS_INDEX':\r\n      return {\r\n        ...state,\r\n        currentIndex: action.index\r\n      }\r\n    case 'SET_QUESTION_SCORE':\r\n      return {\r\n        ...state,\r\n        questionScore: state.questionScore + action.score\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default dataReducer;","const initialState = {\r\n    isLoading: false\r\n  }\r\n  \r\nconst uiReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'UI_START_LOADING':\r\n        return {\r\n          ...state,\r\n          isLoading: true\r\n        }\r\n        case 'UI_STOP_LOADING':\r\n        return {\r\n          ...state,\r\n          isLoading: false\r\n        }\r\n      default:\r\n        return state\r\n    }\r\n  }\r\n  \r\n  export default uiReducer;","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport thunk from 'redux-thunk';\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nimport dataReducer from './reducers/dataReducer';\r\nimport uiReducer from './reducers/uiReducer';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n  whitelist: [],\r\n}\r\n\r\nconst appReducer = combineReducers({\r\n  data: dataReducer,\r\n  ui: uiReducer,\r\n});\r\n\r\nconst rootReducer = (state, action) => {\r\n  return appReducer(state, action);\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport default () => {\r\n  let store = createStore(rootReducer, applyMiddleware(thunk));\r\n  let persistor = persistStore(store);\r\n  return { store, persistor }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport configureStore from './store/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst store = configureStore().store;\nconst persistor = configureStore().persistor;\n\nconst RRedux = () => (\n  <Provider store={store}>\n    {/* <PersistGate loading={null} persistor={persistor}> */}\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    {/* </PersistGate> */}\n  </Provider>\n)\n\nReactDOM.render(\n  <RRedux/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}